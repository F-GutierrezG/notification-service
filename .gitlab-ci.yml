image: docker
services:
  - docker:dind

variables:
  TAG: ${CI_COMMIT_REF_NAME}
  REGISTRY_REPO: registry.gitlab.com/gusisoft/onelike/notifications-service
  NOTIFICATIONS: notifications
  NOTIFICATIONS_DB: notifications-db
  SWAGGER: notifications-swagger

stages:
  - registry
  - deploy

Notifications Service:
  stage: registry
  only:
    - stage
    - master
  before_script:
    - apk add --no-cache git
    - export COMMIT_TIME=$(git show -s --format=%ct $CI_COMMIT_SHA)
    - export TAG=${CI_COMMIT_REF_NAME}_$COMMIT_TIME
    - docker login -u gitlab-ci-token -p $DOCKER_TOKEN registry.gitlab.com
    - export MAIN_REPO="https://${GITLAB_USER}:${GITLAB_PASSWORD}@gitlab.com/gusisoft/OneLike/notifications-service.git"
    - export NOTIFICATIONS_REPO="${MAIN_REPO}#${CI_COMMIT_REF_NAME}"
  script:
    - docker build $NOTIFICATIONS_REPO -t $NOTIFICATIONS:$CI_COMMIT_SHA -f Dockerfile-${CI_COMMIT_REF_NAME}
    - docker tag $NOTIFICATIONS:$CI_COMMIT_SHA $REGISTRY_REPO/$NOTIFICATIONS:$TAG
    - docker push $REGISTRY_REPO/$NOTIFICATIONS:$TAG
  after_script:
    - docker image rm -f $(docker images registry.gitlab.com/gusisoft/onelike/notifications-service/notifications -q)

Notifications DB:
  stage: registry
  only:
    - stage
  before_script:
    - apk add --no-cache git
    - export COMMIT_TIME=$(git show -s --format=%ct $CI_COMMIT_SHA)
    - export TAG=${CI_COMMIT_REF_NAME}_$COMMIT_TIME
    - docker login -u gitlab-ci-token -p $DOCKER_TOKEN registry.gitlab.com
    - export MAIN_REPO="https://${GITLAB_USER}:${GITLAB_PASSWORD}@gitlab.com/gusisoft/OneLike/notifications-service.git"
    - export NOTIFICATIONS_DB_REPO="${MAIN_REPO}#${CI_COMMIT_REF_NAME}:db"
  script:
    - docker build $NOTIFICATIONS_DB_REPO -t $NOTIFICATIONS_DB:$CI_COMMIT_SHA -f Dockerfile
    - docker tag $NOTIFICATIONS_DB:$CI_COMMIT_SHA $REGISTRY_REPO/$NOTIFICATIONS_DB:$TAG
    - docker push $REGISTRY_REPO/$NOTIFICATIONS_DB:$TAG
  after_script:
    - docker image rm -f $(docker images registry.gitlab.com/gusisoft/onelike/notifications-service/notifications-db -q)

Notifications Swagger:
  stage: registry
  only:
    - stage
    - master
  before_script:
    - apk add --no-cache git
    - export COMMIT_TIME=$(git show -s --format=%ct $CI_COMMIT_SHA)
    - export TAG=${CI_COMMIT_REF_NAME}_$COMMIT_TIME
    - docker login -u gitlab-ci-token -p $DOCKER_TOKEN registry.gitlab.com
    - export MAIN_REPO="https://${GITLAB_USER}:${GITLAB_PASSWORD}@gitlab.com/gusisoft/OneLike/notifications-service.git"
    - export SWAGGER_REPO="${MAIN_REPO}#${CI_COMMIT_REF_NAME}:swagger"
  script:
    - docker build $SWAGGER_REPO -t $SWAGGER:$CI_COMMIT_SHA -f Dockerfile
    - docker tag $SWAGGER:$CI_COMMIT_SHA $REGISTRY_REPO/$SWAGGER:$TAG
    - docker push $REGISTRY_REPO/$SWAGGER:$TAG
  after_script:
    - docker image rm -f $(docker images registry.gitlab.com/gusisoft/onelike/notifications-service/notifications-swagger -q)

Deploy Stage:
  stage: deploy
  only:
    - stage
  before_script:
    - apk add --no-cache openssh-client git
    - export COMMIT_TIME=$(git show -s --format=%ct $CI_COMMIT_SHA)
    - export TAG=${CI_COMMIT_REF_NAME}_$COMMIT_TIME
    - rm -rf ~/.ssh
    - mkdir -p ~/.ssh
    - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - sh ./${CI_COMMIT_REF_NAME}-deploy.sh

Deploy Production:
  stage: deploy
  only:
    - master
  before_script:
    - apk add --no-cache openssh-client git
    - export COMMIT_TIME=$(git show -s --format=%ct $CI_COMMIT_SHA)
    - export TAG=${CI_COMMIT_REF_NAME}_$COMMIT_TIME
    - rm -rf ~/.ssh
    - mkdir -p ~/.ssh
    - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - sh ./${CI_COMMIT_REF_NAME}-deploy.sh
